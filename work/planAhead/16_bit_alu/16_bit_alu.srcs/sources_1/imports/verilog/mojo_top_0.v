/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  reg [15:0] M_ctr_a_d, M_ctr_a_q = 1'h0;
  reg [15:0] M_ctr_b_d, M_ctr_b_q = 1'h0;
  reg [5:0] M_ctr_alufn_d, M_ctr_alufn_q = 1'h0;
  reg [29:0] M_counter_d, M_counter_q = 1'h0;
  localparam START_state = 5'd0;
  localparam ST_A_state = 5'd1;
  localparam ST_B_state = 5'd2;
  localparam SHOW_A_state = 5'd3;
  localparam SHOW_B_state = 5'd4;
  localparam OUT_state = 5'd5;
  localparam ADDERTEST1_state = 5'd6;
  localparam ADDERTEST2_state = 5'd7;
  localparam ADDERTEST3_state = 5'd8;
  localparam ADDERTESTERROR_state = 5'd9;
  localparam BOOLEANTEST1_state = 5'd10;
  localparam BOOLEANTEST2_state = 5'd11;
  localparam BOOLEANTEST3_state = 5'd12;
  localparam BOOLEANTEST4_state = 5'd13;
  localparam BOOLEANTESTERROR_state = 5'd14;
  localparam SHIFTTEST1_state = 5'd15;
  localparam SHIFTTEST2_state = 5'd16;
  localparam SHIFTTEST3_state = 5'd17;
  localparam SHIFTTESTERROR_state = 5'd18;
  localparam COMPTEST1_state = 5'd19;
  localparam COMPTEST2_state = 5'd20;
  localparam COMPTEST3_state = 5'd21;
  localparam COMPTEST4_state = 5'd22;
  localparam COMPTEST5_state = 5'd23;
  localparam COMPTEST6_state = 5'd24;
  localparam COMPTESTERROR_state = 5'd25;
  
  reg [4:0] M_state_d, M_state_q = START_state;
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_2 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  
  reg [15:0] alu;
  
  localparam X = 5'h1a;
  
  wire [16-1:0] M_alu1_alu_output;
  reg [6-1:0] M_alu1_alufn;
  reg [16-1:0] M_alu1_a;
  reg [16-1:0] M_alu1_b;
  alu_3 alu1 (
    .alufn(M_alu1_alufn),
    .a(M_alu1_a),
    .b(M_alu1_b),
    .alu_output(M_alu1_alu_output)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_ctr_a_d = M_ctr_a_q;
    M_counter_d = M_counter_q;
    M_ctr_b_d = M_ctr_b_q;
    M_ctr_alufn_d = M_ctr_alufn_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_alu1_a = M_ctr_a_q;
    M_alu1_b = M_ctr_b_q;
    M_alu1_alufn = M_ctr_alufn_q;
    led[0+5-:6] = M_ctr_alufn_q;
    alu = M_alu1_alu_output;
    io_led = {alu[8+7-:8], alu[0+7-:8], 8'h00};
    M_seg_values = 16'heeee;
    
    case (M_state_q)
      START_state: begin
        M_seg_values = 16'hdeee;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (io_button[1+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = ST_A_state;
        end else begin
          if (io_button[3+0-:1] == 1'h1) begin
            M_state_d = SHOW_A_state;
          end else begin
            if (io_button[4+0-:1] == 1'h1) begin
              M_state_d = SHOW_B_state;
            end else begin
              if (io_button[0+0-:1] == 1'h1) begin
                M_state_d = OUT_state;
              end else begin
                if (io_button[2+0-:1] == 1'h1) begin
                  M_counter_d = 1'h0;
                  M_state_d = ADDERTEST1_state;
                end
              end
            end
          end
        end
      end
      ST_A_state: begin
        M_ctr_a_d[8+7-:8] = io_dip[16+7-:8];
        M_ctr_a_d[0+7-:8] = io_dip[8+7-:8];
        io_led[16+7-:8] = M_ctr_a_q[8+7-:8];
        io_led[8+7-:8] = M_ctr_a_q[0+7-:8];
        M_seg_values = 16'haeee;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[23+6-:7] > 1'h1 && io_button[1+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = ST_B_state;
        end else begin
          if (io_button[3+0-:1] == 1'h1) begin
            M_state_d = SHOW_A_state;
          end else begin
            if (io_button[4+0-:1] == 1'h1) begin
              M_state_d = SHOW_B_state;
            end else begin
              if (io_button[0+0-:1] == 1'h1) begin
                M_state_d = OUT_state;
              end else begin
                if (io_button[2+0-:1] == 1'h1) begin
                  M_counter_d = 1'h0;
                  M_state_d = ADDERTEST1_state;
                end
              end
            end
          end
        end
      end
      ST_B_state: begin
        M_ctr_b_d[8+7-:8] = io_dip[16+7-:8];
        M_ctr_b_d[0+7-:8] = io_dip[8+7-:8];
        io_led[16+7-:8] = M_ctr_b_q[8+7-:8];
        io_led[8+7-:8] = M_ctr_b_q[0+7-:8];
        M_seg_values = 16'hbeee;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[23+6-:7] > 1'h1 && io_button[1+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = ST_A_state;
        end else begin
          if (io_button[3+0-:1] == 1'h1) begin
            M_state_d = SHOW_A_state;
          end else begin
            if (io_button[4+0-:1] == 1'h1) begin
              M_state_d = SHOW_B_state;
            end else begin
              if (io_button[0+0-:1] == 1'h1) begin
                M_state_d = OUT_state;
              end else begin
                if (io_button[2+0-:1] == 1'h1) begin
                  M_counter_d = 1'h0;
                  M_state_d = ADDERTEST1_state;
                end
              end
            end
          end
        end
      end
      OUT_state: begin
        M_ctr_alufn_d = io_dip[0+0+5-:6];
        io_led[16+7-:8] = alu[8+7-:8];
        io_led[8+7-:8] = alu[0+7-:8];
        M_seg_values = 16'hceee;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (io_button[1+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = ST_A_state;
        end else begin
          if (io_button[3+0-:1] == 1'h1) begin
            M_state_d = SHOW_A_state;
          end else begin
            if (io_button[4+0-:1] == 1'h1) begin
              M_state_d = SHOW_B_state;
            end else begin
              if (io_button[0+0-:1] == 1'h1) begin
                M_state_d = OUT_state;
              end else begin
                if (io_button[2+0-:1] == 1'h1) begin
                  M_counter_d = 1'h0;
                  M_state_d = ADDERTEST1_state;
                end
              end
            end
          end
        end
      end
      SHOW_A_state: begin
        io_led[16+7-:8] = M_ctr_a_q[8+7-:8];
        io_led[8+7-:8] = M_ctr_a_q[0+7-:8];
        M_seg_values = 16'hdeea;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (io_button[1+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = ST_A_state;
        end else begin
          if (io_button[3+0-:1] == 1'h1) begin
            M_state_d = SHOW_A_state;
          end else begin
            if (io_button[4+0-:1] == 1'h1) begin
              M_state_d = SHOW_B_state;
            end else begin
              if (io_button[0+0-:1] == 1'h1) begin
                M_state_d = OUT_state;
              end else begin
                if (io_button[2+0-:1] == 1'h1) begin
                  M_counter_d = 1'h0;
                  M_state_d = ADDERTEST1_state;
                end
              end
            end
          end
        end
      end
      SHOW_B_state: begin
        io_led[16+7-:8] = M_ctr_b_q[8+7-:8];
        io_led[8+7-:8] = M_ctr_b_q[0+7-:8];
        M_seg_values = 16'hdeeb;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (io_button[1+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = ST_A_state;
        end else begin
          if (io_button[3+0-:1] == 1'h1) begin
            M_state_d = SHOW_A_state;
          end else begin
            if (io_button[4+0-:1] == 1'h1) begin
              M_state_d = SHOW_B_state;
            end else begin
              if (io_button[0+0-:1] == 1'h1) begin
                M_state_d = OUT_state;
              end else begin
                if (io_button[2+0-:1] == 1'h1) begin
                  M_counter_d = 1'h0;
                  M_state_d = ADDERTEST1_state;
                end
              end
            end
          end
        end
      end
      ADDERTEST1_state: begin
        M_ctr_alufn_d = 6'h00;
        M_ctr_a_d = 16'hffd8;
        M_ctr_b_d = 16'hffc2;
        
        case (M_counter_q[26+1-:2])
          2'h1: begin
            io_led[8+15-:16] = {M_ctr_a_q[8+7-:8], M_ctr_a_q[0+7-:8]};
            M_seg_values = 16'ha1ea;
          end
          2'h2: begin
            io_led[8+15-:16] = {M_ctr_b_q[8+7-:8], M_ctr_b_q[0+7-:8]};
            M_seg_values = 16'ha1eb;
          end
          2'h3: begin
            io_led[8+15-:16] = {alu[8+7-:8], alu[0+7-:8]};
            if (alu == 16'hff9a) begin
              M_seg_values = 16'h9add;
            end else begin
              M_seg_values = 16'ha1ef;
            end
          end
          default: begin
            io_led[8+15-:16] = 16'h0000;
            M_seg_values = 16'ha1ee;
          end
        endcase
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = ADDERTEST2_state;
        end
      end
      ADDERTEST2_state: begin
        M_ctr_alufn_d = 6'h01;
        M_ctr_a_d = 16'hffd8;
        M_ctr_b_d = 16'hffc2;
        
        case (M_counter_q[26+1-:2])
          2'h1: begin
            io_led[8+15-:16] = {M_ctr_a_q[8+7-:8], M_ctr_a_q[0+7-:8]};
            M_seg_values = 16'ha2ea;
          end
          2'h2: begin
            io_led[8+15-:16] = {M_ctr_b_q[8+7-:8], M_ctr_b_q[0+7-:8]};
            M_seg_values = 16'ha2eb;
          end
          2'h3: begin
            io_led[8+15-:16] = {alu[8+7-:8], alu[0+7-:8]};
            if (alu == 16'h0016) begin
              M_seg_values = 16'h9add;
            end else begin
              M_seg_values = 16'ha2ef;
            end
          end
          default: begin
            io_led[8+15-:16] = 16'h0000;
            M_seg_values = 16'ha2ee;
          end
        endcase
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = ADDERTEST3_state;
        end
      end
      ADDERTEST3_state: begin
        M_ctr_alufn_d = 6'h02;
        M_ctr_a_d = 16'h0004;
        M_ctr_b_d = 16'h003e;
        
        case (M_counter_q[26+1-:2])
          2'h1: begin
            io_led[8+15-:16] = {M_ctr_a_q[8+7-:8], M_ctr_a_q[0+7-:8]};
            M_seg_values = 16'ha3ea;
          end
          2'h2: begin
            io_led[8+15-:16] = {M_ctr_b_q[8+7-:8], M_ctr_b_q[0+7-:8]};
            M_seg_values = 16'ha3eb;
          end
          2'h3: begin
            io_led[8+15-:16] = {alu[8+7-:8], alu[0+7-:8]};
            if (alu == 16'h00f8) begin
              M_seg_values = 16'h9add;
            end else begin
              M_seg_values = 16'ha3ef;
            end
          end
          default: begin
            io_led[8+15-:16] = 16'h0000;
            M_seg_values = 16'ha3ee;
          end
        endcase
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = ADDERTESTERROR_state;
        end
      end
      ADDERTESTERROR_state: begin
        M_ctr_alufn_d = 6'h02;
        M_ctr_a_d = 17'h00065;
        M_ctr_b_d = 16'h0064;
        
        case (M_counter_q[26+1-:2])
          2'h1: begin
            io_led[8+15-:16] = 16'h0064;
            M_seg_values = 16'hafea;
          end
          2'h2: begin
            io_led[8+15-:16] = {M_ctr_b_q[8+7-:8], M_ctr_b_q[0+7-:8]};
            M_seg_values = 16'hafeb;
          end
          2'h3: begin
            io_led[8+15-:16] = {alu[8+7-:8], alu[0+7-:8]};
            if (alu == 16'h00c8) begin
              M_seg_values = 16'h9add;
            end else begin
              M_seg_values = 16'hafef;
            end
          end
          default: begin
            io_led[8+15-:16] = 16'h0000;
            M_seg_values = 16'hafee;
          end
        endcase
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = BOOLEANTEST1_state;
        end
      end
      BOOLEANTEST1_state: begin
        M_ctr_alufn_d = 6'h1a;
        M_ctr_a_d = 16'hf800;
        M_ctr_b_d = 16'h001f;
        
        case (M_counter_q[26+1-:2])
          2'h1: begin
            io_led[8+15-:16] = {M_ctr_a_q[8+7-:8], M_ctr_a_q[0+7-:8]};
            M_seg_values = 16'hb1ea;
          end
          2'h2: begin
            io_led[8+15-:16] = {M_ctr_b_q[8+7-:8], M_ctr_b_q[0+7-:8]};
            M_seg_values = 16'hb1eb;
          end
          2'h3: begin
            io_led[8+15-:16] = {alu[8+7-:8], alu[0+7-:8]};
            if (alu == 16'hf800) begin
              M_seg_values = 16'h9add;
            end else begin
              M_seg_values = 16'hb1ef;
            end
          end
          default: begin
            io_led[8+15-:16] = 16'h0000;
            M_seg_values = 16'hb1ee;
          end
        endcase
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = BOOLEANTEST2_state;
        end
      end
      BOOLEANTEST2_state: begin
        M_ctr_alufn_d = 6'h18;
        M_ctr_a_d = 16'hf800;
        M_ctr_b_d = 16'h1f00;
        
        case (M_counter_q[26+1-:2])
          2'h1: begin
            io_led[8+15-:16] = {M_ctr_a_q[8+7-:8], M_ctr_a_q[0+7-:8]};
            M_seg_values = 16'hb2ea;
          end
          2'h2: begin
            io_led[8+15-:16] = {M_ctr_b_q[8+7-:8], M_ctr_b_q[0+7-:8]};
            M_seg_values = 16'hb2eb;
          end
          2'h3: begin
            io_led[8+15-:16] = {alu[8+7-:8], alu[0+7-:8]};
            if (alu == 16'h1800) begin
              M_seg_values = 16'h9add;
            end else begin
              M_seg_values = 16'hb2ef;
            end
          end
          default: begin
            io_led[8+15-:16] = 16'h0000;
            M_seg_values = 16'hb2ee;
          end
        endcase
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = BOOLEANTEST3_state;
        end
      end
      BOOLEANTEST3_state: begin
        M_ctr_alufn_d = 6'h1e;
        M_ctr_a_d = 16'hf800;
        M_ctr_b_d = 16'h1f00;
        
        case (M_counter_q[26+1-:2])
          2'h1: begin
            io_led[8+15-:16] = {M_ctr_a_q[8+7-:8], M_ctr_a_q[0+7-:8]};
            M_seg_values = 16'hb3ea;
          end
          2'h2: begin
            io_led[8+15-:16] = {M_ctr_b_q[8+7-:8], M_ctr_b_q[0+7-:8]};
            M_seg_values = 16'hb3eb;
          end
          2'h3: begin
            io_led[8+15-:16] = {alu[8+7-:8], alu[0+7-:8]};
            if (alu == 16'hff00) begin
              M_seg_values = 16'h9add;
            end else begin
              M_seg_values = 16'hb3ef;
            end
          end
          default: begin
            io_led[8+15-:16] = 16'h0000;
            M_seg_values = 16'hb3ee;
          end
        endcase
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = BOOLEANTEST4_state;
        end
      end
      BOOLEANTEST4_state: begin
        M_ctr_alufn_d = 6'h16;
        M_ctr_a_d = 16'hf800;
        M_ctr_b_d = 16'h1f00;
        
        case (M_counter_q[26+1-:2])
          2'h1: begin
            io_led[8+15-:16] = {M_ctr_a_q[8+7-:8], M_ctr_a_q[0+7-:8]};
            M_seg_values = 16'hb4ea;
          end
          2'h2: begin
            io_led[8+15-:16] = {M_ctr_b_q[8+7-:8], M_ctr_b_q[0+7-:8]};
            M_seg_values = 16'hb4eb;
          end
          2'h3: begin
            io_led[8+15-:16] = {alu[8+7-:8], alu[0+7-:8]};
            if (alu == 16'he700) begin
              M_seg_values = 16'h9add;
            end else begin
              M_seg_values = 16'hb4ef;
            end
          end
          default: begin
            io_led[8+15-:16] = 16'h0000;
            M_seg_values = 16'hb4ee;
          end
        endcase
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = BOOLEANTESTERROR_state;
        end
      end
      BOOLEANTESTERROR_state: begin
        M_ctr_alufn_d = 6'h16;
        M_ctr_a_d = 17'h0f801;
        M_ctr_b_d = 16'h1f00;
        
        case (M_counter_q[26+2-:3])
          3'h1: begin
            io_led[8+15-:16] = 16'hf800;
            M_seg_values = 16'hbfea;
          end
          3'h2: begin
            io_led[8+15-:16] = {M_ctr_b_q[8+7-:8], M_ctr_b_q[0+7-:8]};
            M_seg_values = 16'hbfeb;
          end
          3'h3: begin
            io_led[8+15-:16] = {alu[8+7-:8], alu[0+7-:8]};
            if (alu == 16'he700) begin
              M_seg_values = 16'h9add;
            end else begin
              M_seg_values = 16'hbfef;
            end
          end
          default: begin
            io_led[8+15-:16] = 16'h0000;
            M_seg_values = 16'hbfee;
          end
        endcase
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = SHIFTTEST1_state;
        end
      end
      SHIFTTEST1_state: begin
        M_ctr_alufn_d = 6'h20;
        M_ctr_a_d = 16'h0880;
        M_ctr_b_d = 16'h0003;
        
        case (M_counter_q[26+2-:3])
          3'h1: begin
            io_led[8+15-:16] = {M_ctr_a_q[8+7-:8], M_ctr_a_q[0+7-:8]};
            M_seg_values = 16'hd1ea;
          end
          3'h2: begin
            io_led[8+15-:16] = {M_ctr_b_q[8+7-:8], M_ctr_b_q[0+7-:8]};
            M_seg_values = 16'hd1eb;
          end
          3'h3: begin
            io_led[8+15-:16] = {alu[8+7-:8], alu[0+7-:8]};
            if (alu == 16'h4400) begin
              M_seg_values = 16'h9add;
            end else begin
              M_seg_values = 16'hd1ef;
            end
          end
          default: begin
            io_led[8+15-:16] = 16'h0000;
            M_seg_values = 16'hd1ee;
          end
        endcase
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = SHIFTTEST2_state;
        end
      end
      SHIFTTEST2_state: begin
        M_ctr_alufn_d = 6'h21;
        M_ctr_a_d = 16'h0880;
        M_ctr_b_d = 16'h0003;
        
        case (M_counter_q[26+1-:2])
          2'h1: begin
            io_led[8+15-:16] = {M_ctr_a_q[8+7-:8], M_ctr_a_q[0+7-:8]};
            M_seg_values = 16'hd2ea;
          end
          2'h2: begin
            io_led[8+15-:16] = {M_ctr_b_q[8+7-:8], M_ctr_b_q[0+7-:8]};
            M_seg_values = 16'hd2eb;
          end
          2'h3: begin
            io_led[8+15-:16] = {alu[8+7-:8], alu[0+7-:8]};
            if (alu == 16'h0110) begin
              M_seg_values = 16'h9add;
            end else begin
              M_seg_values = 16'hd2ef;
            end
          end
          default: begin
            io_led[8+15-:16] = 16'h0000;
            M_seg_values = 16'hd2ee;
          end
        endcase
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = SHIFTTEST3_state;
        end
      end
      SHIFTTEST3_state: begin
        M_ctr_alufn_d = 6'h23;
        M_ctr_a_d = 16'hf080;
        M_ctr_b_d = 16'h0004;
        
        case (M_counter_q[26+1-:2])
          2'h1: begin
            io_led[8+15-:16] = {M_ctr_a_q[8+7-:8], M_ctr_a_q[0+7-:8]};
            M_seg_values = 16'hd3ea;
          end
          2'h2: begin
            io_led[8+15-:16] = {M_ctr_b_q[8+7-:8], M_ctr_b_q[0+7-:8]};
            M_seg_values = 16'hd3eb;
          end
          2'h3: begin
            io_led[8+15-:16] = {alu[8+7-:8], alu[0+7-:8]};
            if (alu == 16'hff08) begin
              M_seg_values = 16'h9add;
            end else begin
              M_seg_values = 16'hd3ef;
            end
          end
          default: begin
            io_led[8+15-:16] = 16'h0000;
            M_seg_values = 16'hd3ee;
          end
        endcase
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = SHIFTTESTERROR_state;
        end
      end
      SHIFTTESTERROR_state: begin
        M_ctr_alufn_d = 6'h20;
        M_ctr_a_d = 17'h0f081;
        M_ctr_b_d = 16'h0001;
        
        case (M_counter_q[26+1-:2])
          2'h1: begin
            io_led[8+15-:16] = 16'hf080;
            M_seg_values = 16'hdfea;
          end
          2'h2: begin
            io_led[8+15-:16] = {M_ctr_b_q[8+7-:8], M_ctr_b_q[0+7-:8]};
            M_seg_values = 16'hf3eb;
          end
          2'h3: begin
            io_led[8+15-:16] = {alu[8+7-:8], alu[0+7-:8]};
            if (alu == 16'he100) begin
              M_seg_values = 16'h9add;
            end else begin
              M_seg_values = 16'hdfef;
            end
          end
          default: begin
            io_led[8+15-:16] = 16'h0000;
            M_seg_values = 16'ha2ee;
          end
        endcase
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = COMPTEST1_state;
        end
      end
      COMPTEST1_state: begin
        M_ctr_alufn_d = 6'h33;
        M_ctr_a_d = 16'h003e;
        M_ctr_b_d = 16'h003e;
        
        case (M_counter_q[26+1-:2])
          2'h1: begin
            io_led[8+15-:16] = {M_ctr_a_q[8+7-:8], M_ctr_a_q[0+7-:8]};
            M_seg_values = 16'hc1ea;
          end
          2'h2: begin
            io_led[8+15-:16] = {M_ctr_b_q[8+7-:8], M_ctr_b_q[0+7-:8]};
            M_seg_values = 16'hc1eb;
          end
          2'h3: begin
            io_led[8+15-:16] = {alu[8+7-:8], alu[0+7-:8]};
            if (alu == 16'h0001) begin
              M_seg_values = 16'h9add;
            end else begin
              M_seg_values = 16'hc1ef;
            end
          end
          default: begin
            io_led[8+15-:16] = 16'h0000;
            M_seg_values = 16'hc1ee;
          end
        endcase
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = COMPTEST2_state;
        end
      end
      COMPTEST2_state: begin
        M_ctr_alufn_d = 6'h33;
        M_ctr_a_d = 16'h003e;
        M_ctr_b_d = 16'h003f;
        
        case (M_counter_q[26+1-:2])
          2'h1: begin
            io_led[8+15-:16] = {M_ctr_a_q[8+7-:8], M_ctr_a_q[0+7-:8]};
            M_seg_values = 16'hc2ea;
          end
          2'h2: begin
            io_led[8+15-:16] = {M_ctr_b_q[8+7-:8], M_ctr_b_q[0+7-:8]};
            M_seg_values = 16'hc2eb;
          end
          2'h3: begin
            io_led[8+15-:16] = {alu[8+7-:8], alu[0+7-:8]};
            if (alu == 16'h0000) begin
              M_seg_values = 16'h9add;
            end else begin
              M_seg_values = 16'hc2ef;
            end
          end
          default: begin
            io_led[8+15-:16] = 16'h0000;
            M_seg_values = 16'hc2ee;
          end
        endcase
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = COMPTEST3_state;
        end
      end
      COMPTEST3_state: begin
        M_ctr_alufn_d = 6'h35;
        M_ctr_a_d = 16'h003e;
        M_ctr_b_d = 16'h003f;
        
        case (M_counter_q[26+1-:2])
          2'h1: begin
            io_led[8+15-:16] = {M_ctr_a_q[8+7-:8], M_ctr_a_q[0+7-:8]};
            M_seg_values = 16'hc3ea;
          end
          2'h2: begin
            io_led[8+15-:16] = {M_ctr_b_q[8+7-:8], M_ctr_b_q[0+7-:8]};
            M_seg_values = 16'hc3eb;
          end
          2'h3: begin
            io_led[8+15-:16] = {alu[8+7-:8], alu[0+7-:8]};
            if (alu == 16'h0001) begin
              M_seg_values = 16'h9add;
            end else begin
              M_seg_values = 16'hc3ef;
            end
          end
          default: begin
            io_led[8+15-:16] = 16'h0000;
            M_seg_values = 16'hc3ee;
          end
        endcase
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = COMPTEST4_state;
        end
      end
      COMPTEST4_state: begin
        M_ctr_alufn_d = 6'h35;
        M_ctr_a_d = 16'h003f;
        M_ctr_b_d = 16'h003f;
        
        case (M_counter_q[26+1-:2])
          2'h1: begin
            io_led[8+15-:16] = {M_ctr_a_q[8+7-:8], M_ctr_a_q[0+7-:8]};
            M_seg_values = 16'hc4ea;
          end
          2'h2: begin
            io_led[8+15-:16] = {M_ctr_b_q[8+7-:8], M_ctr_b_q[0+7-:8]};
            M_seg_values = 16'hc4eb;
          end
          2'h3: begin
            io_led[8+15-:16] = {alu[8+7-:8], alu[0+7-:8]};
            if (alu == 16'h0000) begin
              M_seg_values = 16'h9add;
            end else begin
              M_seg_values = 16'hc4ef;
            end
          end
          default: begin
            io_led[8+15-:16] = 16'h0000;
            M_seg_values = 16'hc4ee;
          end
        endcase
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = COMPTEST5_state;
        end
      end
      COMPTEST5_state: begin
        M_ctr_alufn_d = 6'h37;
        M_ctr_a_d = 16'h003f;
        M_ctr_b_d = 16'h003f;
        
        case (M_counter_q[26+1-:2])
          2'h1: begin
            io_led[8+15-:16] = {M_ctr_a_q[8+7-:8], M_ctr_a_q[0+7-:8]};
            M_seg_values = 16'hc5ea;
          end
          2'h2: begin
            io_led[8+15-:16] = {M_ctr_b_q[8+7-:8], M_ctr_b_q[0+7-:8]};
            M_seg_values = 16'hc5eb;
          end
          2'h3: begin
            io_led[8+15-:16] = {alu[8+7-:8], alu[0+7-:8]};
            if (alu == 16'h0001) begin
              M_seg_values = 16'h9add;
            end else begin
              M_seg_values = 16'hc5ef;
            end
          end
          default: begin
            io_led[8+15-:16] = 16'h0000;
            M_seg_values = 16'hc5ee;
          end
        endcase
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = COMPTEST6_state;
        end
      end
      COMPTEST6_state: begin
        M_ctr_alufn_d = 6'h37;
        M_ctr_a_d = 16'h003f;
        M_ctr_b_d = 16'h003e;
        
        case (M_counter_q[26+1-:2])
          2'h1: begin
            io_led[8+15-:16] = {M_ctr_a_q[8+7-:8], M_ctr_a_q[0+7-:8]};
            M_seg_values = 16'hc6ea;
          end
          2'h2: begin
            io_led[8+15-:16] = {M_ctr_b_q[8+7-:8], M_ctr_b_q[0+7-:8]};
            M_seg_values = 16'hc6eb;
          end
          2'h3: begin
            io_led[8+15-:16] = {alu[8+7-:8], alu[0+7-:8]};
            if (alu == 16'h0000) begin
              M_seg_values = 16'h9add;
            end else begin
              M_seg_values = 16'hc6ef;
            end
          end
          default: begin
            io_led[8+15-:16] = 16'h0000;
            M_seg_values = 16'hc6ee;
          end
        endcase
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = COMPTESTERROR_state;
        end
      end
      COMPTESTERROR_state: begin
        M_ctr_alufn_d = 6'h33;
        M_ctr_a_d = 17'h0003f;
        M_ctr_b_d = 16'h003e;
        
        case (M_counter_q[26+1-:2])
          2'h1: begin
            io_led[8+15-:16] = 16'h003e;
            M_seg_values = 16'hcfea;
          end
          2'h2: begin
            io_led[8+15-:16] = {M_ctr_b_q[8+7-:8], M_ctr_b_q[0+7-:8]};
            M_seg_values = 16'hcfeb;
          end
          2'h3: begin
            io_led[8+15-:16] = {alu[8+7-:8], alu[0+7-:8]};
            if (alu == 16'h0001) begin
              M_seg_values = 16'h9add;
            end else begin
              M_seg_values = 16'hcfef;
            end
          end
          default: begin
            io_led[8+15-:16] = 16'h0000;
            M_seg_values = 16'hcfee;
          end
        endcase
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = START_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_ctr_a_q <= 1'h0;
      M_ctr_b_q <= 1'h0;
      M_ctr_alufn_q <= 1'h0;
      M_counter_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_ctr_a_q <= M_ctr_a_d;
      M_ctr_b_q <= M_ctr_b_d;
      M_ctr_alufn_q <= M_ctr_alufn_d;
      M_counter_q <= M_counter_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
